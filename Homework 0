(require 2htdp/image)



;; Problem 1

;; Part A

(* (- ( * 5 3) (- 8 (string-length (string-append "CS" "1101")))) (/ 64 16))
;; (* (- ( * 5 3) (- 8 (string-length (string-append "CS" "1101")))) (/ 64 16))
;; (* (- 15 (- 8 (string-length (string-append "CS" "1101")))) (/ 64 16))
;; (* (- 15 (- 8 (string-length "CS1101"))) (/ 64 16))
;; (* (- 15 (- 8 6)) (/ 64 16))
;; (* (- 15 2) (/ 64 16))
;; (* 13 (/ 64 16))
;; (* 13 4)
;; 52

;; Part B

(define (triple n)   ; function given in problem
  (* n 3))

(if (< (triple 2) (triple (/ 12 4)))
    (sqrt (+ 4 (* 15 4)))
    107)


;; (if (< (* 2 3) (triple (/ 12 4)))
;;     (sqrt (+ 4 (* 15 4)))
;;     107)

;; (if (< 6 (triple (/ 12 4)))
;;     (sqrt (+ 4 (* 15 4)))
;;     107)

;; (if (< 6 (triple 3))
;;     (sqrt (+ 4 (* 15 4)))
;;     107)

;; (if (< 6 (* 3 3))
;;     (sqrt (+ 4 (* 15 4)))
;;     107)

;; (if (< 6 9)
;;     (sqrt (+ 4 (* 15 4)))
;;     107)

;; (if true
;;     (sqrt (+ 4 (* 15 4)))
;;     107)

;;(sqrt (+ 4 (* 15 4)))

;;(sqrt (+ 4 60))

;;(sqrt 64)

;; 8



;; Problem 2

;; Image -> Image
;; When given an image, produces an image made up of 4 mirrored copies of the original

(define IMG1 .)
(define IMG2 .)

(check-expect (four-square IMG1) (above
                                  (beside IMG1 (flip-horizontal IMG1))
                                  (beside
                                   (flip-vertical IMG1)
                                   (flip-vertical (flip-horizontal IMG1)))))

(check-expect (four-square IMG2) (above
                                  (beside IMG2 (flip-horizontal IMG2))
                                  (beside
                                   (flip-vertical IMG2)
                                   (flip-vertical (flip-horizontal IMG2)))))


;; (define (four-square image) (square 20 "solid" "blue")) ; stub

;; (define (four-square image) ; template
;;  (... image))


(define (four-square image)
  (above
   (beside image (flip-horizontal image))
   (beside (flip-vertical image)
           (flip-vertical (flip-horizontal image)))))



;; Problem 3

(define A1 100)  ; number of attendees at event 1
(define P1 15)   ; price of tickets at event 1

(define A2 500)  ; number of attendees at event 2
(define P2 29.99)   ; price of tickets at event 2

(define A3 10000)  ; number of attendees at event 3
(define P3 150)   ; price of tickets at event 3


;; Natural -> Natural
;; Produces the cost of an event to the venue when given the number of attendees 
(check-expect (cost A1) (+ 2500 (* A1 3))) ; 2800
(check-expect (cost A2) (+ 2500 (* A2 3))) ; 4000
(check-expect (cost A3) (+ 2500 (* A3 3))) ; 32500

;; (define (cost attendees) 0) ; stub

;; (define (cost attendees)      ; template
;;   (... attendees))

(define (cost attendees)
  (+ 2500 (* attendees 3)))

;; Number -> Number
;; Produces the revenue generaged by ticket sales when given the
;; number of attendees (attendees) and the price per ticket (ppt)
(check-expect (revenue A1 P1) (* A1 P1)) ; 1500
(check-expect (revenue A2 P2) (* A2 P2)) ; 14995
(check-expect (revenue A3 P3) (* A3 P3)) ; 1500000

;;(define (revenue attendees ppt) 0) ; stub

;; (define (revenue attendees ppt)   ; template
;;  (... attendees ppt))

(define (revenue attendees ppt) 
  (* attendees ppt))

;; Number -> Number
;; Produces the profit for an event given the
;; number of attendees (attendees) and the price per ticket (ppt)
(check-expect (profit A1 P1) (- (revenue A1 P1) (cost A1))) ; -1300
(check-expect (profit A2 P2) (- (revenue A2 P2) (cost A2))) ; 10995
(check-expect (profit A3 P3) (- (revenue A3 P3) (cost A3))) ; 1467500

;; (define (profit attendees ppt) 0) ; stub

;; (define (profit attendees ppt)    ; template
;;  (... attendees ppt))

(define (profit attendees ppt)
  (- (revenue attendees ppt)
     (cost attendees)))



;; Problem 4

(define PP1 1000) ; purchase price 1
(define DP1 500)  ; down-payment 1

(define PP2 1499.99) ; purchase price 2
(define DP2 299.99)  ; down-payment 2

(define PP3 2000) ; purchase price 3
(define DP3 100)  ; down-payment 3

;; Number -> Number
;; Produces the principal given the purchase price and down-payment
(check-expect (principal PP1 DP1) (- PP1 DP1)) ; 500
(check-expect (principal PP2 DP2) (- PP2 DP2)) ; 1200
(check-expect (principal PP3 DP3) (- PP3 DP3)) ; 1900

;; (define (principal pprice dpayment) 0) ; stub

;; (define (principal pprice dpayment)    ; template
;;   (... pprice dpayment))

(define (principal pprice dpayment)
  (- pprice dpayment))


;; Number -> Number
;; Produces the amount of interest on a 20 year loan
;; at 3% per year given the purchase price and down-payment 
(check-expect (interest PP1 DP1) (* 1.03 (principal PP1 DP1) 20)) ; 10300
(check-expect (interest PP2 DP2) (* 1.03 (principal PP2 DP2) 20)) ; 24720
(check-expect (interest PP3 DP3) (* 1.03 (principal PP3 DP3) 20)) ; 39140

;; (define (interest pprice dpayment) 0) ; stub

;; (define (interest pprice dpayment)    ; template
;;   (... pprice dpayment))

(define (interest pprice dpayment)
  (* 1.03 (principal pprice dpayment) 20))

;; Number -> Number
;; Given the purchase price of a house and the down-payment amount,
;; produces the grand total paid by the buyer
(check-expect (total-house-cost PP1 DP1) (+ PP1 (interest PP1 DP1) 1500)) ; 12800
(check-expect (total-house-cost PP2 DP2) (+ PP2 (interest PP2 DP2) 1500)) ; 27719.99
(check-expect (total-house-cost PP3 DP3) (+ PP3 (interest PP3 DP3) 1500)) ; 42640

;; (define (total-house-cost pprice dpayment) 0) ; stub

;; (define (total-house-cost pprice dpayment)    ; template
;;   (... pprice dpayment))

(define (total-house-cost pprice dpayment)
  (+ pprice (interest pprice dpayment) 1500))
